{
	"info": {
		"_postman_id": "task-management-api-collection",
		"name": "Multi-Organization Task Management API",
		"description": "Complete API testing collection for NestJS task management system with multi-organization support",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "POST Register New Organization + Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@org1.com\",\n  \"password\": \"admin123\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"organizationName\": \"Organization One\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('org1Id', response.user.organizationId);",
									"    pm.collectionVariables.set('adminUserId', response.user.id);",
									"    console.log('Organization One created successfully with admin user');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Register User in Existing Org",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@org1.com\",\n  \"password\": \"user123\",\n  \"firstName\": \"Regular\",\n  \"lastName\": \"User\",\n  \"organizationId\": \"{{org1Id}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('regularUserId', response.user.id);",
									"    console.log('Regular user registered in Organization One');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Login Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@org1.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('adminToken', response.token);",
									"    pm.collectionVariables.set('tokenExpiry', new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString());",
									"    console.log('Admin logged in successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Login Regular User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@org1.com\",\n  \"password\": \"user123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('userToken', response.token);",
									"    console.log('Regular user logged in successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Login Invalid Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@org1.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test('Response contains error message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Invalid credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Register Second Organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@org2.com\",\n  \"password\": \"admin123\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"Two\",\n  \"organizationName\": \"Organization Two\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('org2Id', response.user.organizationId);",
									"    console.log('Organization Two created successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GET Current User Profile (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has user details and organization', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('firstName');",
									"    pm.expect(response).to.have.property('lastName');",
									"    pm.expect(response).to.have.property('role');",
									"    pm.expect(response).to.have.property('organization');",
									"});",
									"pm.test('organizationId matches org1Id', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.organization.id).to.equal(pm.collectionVariables.get('org1Id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Current User Profile (Regular User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Response has user details', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('firstName');",
									"    pm.expect(response).to.have.property('lastName');",
									"    pm.expect(response).to.have.property('role');",
									"    pm.expect(response.role).to.equal('USER');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Current User Profile (No Token)",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET All Users (Admin Only)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Returns array of users', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"});",
									"pm.test('All users belong to same organization', function () {",
									"    const response = pm.response.json();",
									"    const org1Id = pm.collectionVariables.get('org1Id');",
									"    response.forEach(user => {",
									"        pm.expect(user).to.not.have.property('organizationId');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET All Users (Regular User - Should Fail)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Specific User by ID (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{regularUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{regularUserId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('User details returned', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('firstName');",
									"    pm.expect(response).to.have.property('lastName');",
									"    pm.expect(response).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Specific User by ID (User viewing self)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{regularUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{regularUserId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('User can view own profile', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.equal(pm.collectionVariables.get('regularUserId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Other User (Regular User - Should Fail)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/{{adminUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{adminUserId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "POST Create Task (Admin User)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Design Database Schema\",\n  \"description\": \"Create comprehensive database schema for new features\",\n  \"status\": \"PENDING\",\n  \"priority\": \"HIGH\",\n  \"dueDate\": \"2025-10-30T00:00:00.000Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Task belongs to org1Id', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.organizationId).to.equal(pm.collectionVariables.get('org1Id'));",
									"});",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('taskId', response.id);",
									"    console.log('Task created with ID:', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Create Task (Regular User)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement Authentication\",\n  \"description\": \"Add JWT authentication to API\",\n  \"status\": \"IN_PROGRESS\",\n  \"priority\": \"URGENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Task created successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('title');",
									"    pm.expect(response.title).to.equal('Implement Authentication');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Create Task with Minimal Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Quick Task\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test('Defaults applied correctly', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.equal('PENDING');",
									"    pm.expect(response.priority).to.equal('MEDIUM');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Create Task without Title (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Task without title\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Create Task with Invalid Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Invalid Task\",\n  \"status\": \"INVALID_STATUS\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "POST Create Multiple Tasks - Task 1",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task 1\",\n  \"description\": \"First task for testing\",\n  \"status\": \"PENDING\",\n  \"priority\": \"LOW\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "POST Create Multiple Tasks - Task 2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task 2\",\n  \"description\": \"Second task for testing\",\n  \"status\": \"IN_PROGRESS\",\n  \"priority\": \"MEDIUM\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "POST Create Multiple Tasks - Task 3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task 3\",\n  \"description\": \"Third task for testing\",\n  \"status\": \"COMPLETED\",\n  \"priority\": \"HIGH\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "POST Create Multiple Tasks - Task 4",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task 4\",\n  \"description\": \"Fourth task for testing\",\n  \"status\": \"PENDING\",\n  \"priority\": \"URGENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "POST Create Multiple Tasks - Task 5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task 5\",\n  \"description\": \"Fifth task for testing\",\n  \"status\": \"IN_PROGRESS\",\n  \"priority\": \"LOW\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "GET All Tasks (Admin User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Returns array', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"pm.test('All tasks belong to org1Id', function () {",
									"    const response = pm.response.json();",
									"    const org1Id = pm.collectionVariables.get('org1Id');",
									"    response.forEach(task => {",
									"        pm.expect(task.organizationId).to.equal(org1Id);",
									"    });",
									"});",
									"pm.test('Includes tasks from all users in organization', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.length).to.be.greaterThan(0);",
									"    const adminUserId = pm.collectionVariables.get('adminUserId');",
									"    const regularUserId = pm.collectionVariables.get('regularUserId');",
									"    const hasAdminTasks = response.some(task => task.createdById === adminUserId);",
									"    const hasUserTasks = response.some(task => task.createdById === regularUserId);",
									"    pm.expect(hasAdminTasks || hasUserTasks).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET All Tasks (Regular User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Returns only tasks created by this user', function () {",
									"    const response = pm.response.json();",
									"    const regularUserId = pm.collectionVariables.get('regularUserId');",
									"    response.forEach(task => {",
									"        pm.expect(task.createdById).to.equal(regularUserId);",
									"    });",
									"});",
									"pm.test('Does not include admin tasks', function () {",
									"    const response = pm.response.json();",
									"    const adminUserId = pm.collectionVariables.get('adminUserId');",
									"    const hasAdminTasks = response.some(task => task.createdById === adminUserId);",
									"    pm.expect(hasAdminTasks).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET All Tasks (No Authorization)",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Specific Task by ID (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Returns task details', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('title');",
									"    pm.expect(response).to.have.property('description');",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response).to.have.property('priority');",
									"});",
									"pm.test('Includes createdBy user information', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('createdBy');",
									"    pm.expect(response.createdBy).to.have.property('id');",
									"    pm.expect(response.createdBy).to.have.property('email');",
									"    pm.expect(response.createdBy).to.have.property('firstName');",
									"    pm.expect(response.createdBy).to.have.property('lastName');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Specific Task by ID (Owner User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"if (pm.response.code === 200) {",
									"    pm.test('User can access own task', function () {",
									"        const response = pm.response.json();",
									"        const regularUserId = pm.collectionVariables.get('regularUserId');",
									"        pm.expect(response.createdById).to.equal(regularUserId);",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test('User cannot access admin task', function () {",
									"        pm.expect(pm.response.code).to.equal(403);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Non-existent Task",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "GET Task with Invalid UUID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/invalid-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"invalid-id"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Task Title (Admin)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Task Title\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Title changed successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.title).to.equal('Updated Task Title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Task Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"IN_PROGRESS\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Status updated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.equal('IN_PROGRESS');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Task Priority",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"priority\": \"URGENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Priority updated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.priority).to.equal('URGENT');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Multiple Fields",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Completely Updated Task\",\n  \"description\": \"New description\",\n  \"status\": \"COMPLETED\",\n  \"priority\": \"LOW\",\n  \"dueDate\": \"2025-11-15T00:00:00.000Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('All fields updated successfully', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.title).to.equal('Completely Updated Task');",
									"    pm.expect(response.description).to.equal('New description');",
									"    pm.expect(response.status).to.equal('COMPLETED');",
									"    pm.expect(response.priority).to.equal('LOW');",
									"    pm.expect(response.dueDate).to.equal('2025-11-15T00:00:00.000Z');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Own Task (Regular User)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"COMPLETED\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"if (pm.response.code === 200) {",
									"    pm.test('User can update own task', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.status).to.equal('COMPLETED');",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test('User cannot update admin task', function () {",
									"        pm.expect(pm.response.code).to.equal(403);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update Other User's Task (Should Fail)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Trying to update admin's task\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "PATCH Update with Invalid Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"INVALID\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE Task (Admin User)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Returns success message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"    pm.expect(response.message).to.include('deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE Own Task (Regular User)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"if (pm.response.code === 200) {",
									"    pm.test('User can delete own task', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.message).to.include('deleted successfully');",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test('User cannot delete admin task', function () {",
									"        pm.expect(pm.response.code).to.equal(403);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE Other User's Task (Should Fail)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE Non-existent Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "DELETE Task (No Authorization)",
					"request": {
						"method": "DELETE",
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Get Current Organization (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"current"
							]
						}
					}
				},
				{
					"name": "Get Current Organization (Regular User)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizations/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"current"
							]
						}
					}
				}
			]
		},
		{
			"name": "Admin Operations",
			"item": [
				{
					"name": "Admin - Get All Users in Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					}
				},
				{
					"name": "Admin - Get All Tasks in Organization",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "Admin - Access Another User's Task",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Register with Existing Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin1@example.com\",\n  \"password\": \"AdminPass123\",\n  \"firstName\": \"Duplicate\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					}
				},
				{
					"name": "Login with Invalid Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin1@example.com\",\n  \"password\": \"WrongPassword\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "Access Protected Route Without Token",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					}
				},
				{
					"name": "Access Protected Route with Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid-token-here"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					}
				},
				{
					"name": "Regular User - Try to Access All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					}
				},
				{
					"name": "Regular User - Try to Access Another User's Task",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{taskId}}"
							]
						}
					}
				},
				{
					"name": "Create Task with Invalid Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"priority\": \"INVALID_PRIORITY\",\n  \"status\": \"INVALID_STATUS\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					}
				},
				{
					"name": "Get Non-existent Task",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					}
				},
				{
					"name": "Get Non-existent User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "regularUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "org1Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "org2Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "",
			"type": "string"
		}
	]
}
